# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
from odbAccess import *
import regionToolset
import mesh
import subprocess
import sys
import os
import math
import csv
import numpy as np
#PARAMETERS---------------------------------------------------------------------
###
#Independent of iterated values--ln and ln2-------------------------------------------------------------------------
#the hinge width
ln2=2.0E-3
#edge length of a square
l=50.0E-3
## ln1 and ln will be changed as a function of theta
theta_list=[15]

#ln1=15.0
#ln=50.0
#number of unit cells-----------------------------
nx=3      #number of unit cells x direction
ny=3         #number of unit cells in y direction

#geometry counter
ctr=1
#displacement at right boundary
right_disp=20
#inc=2*ln
#Material properties-----------------------------------------------
Ex=200E9  #youngs modulus of the material used
v=0.29   #poissons ratio of the materials used
rho=7872
#Mesh Constraints
mesh_size=1



theta_poi_dict={}
#theta_poi_dict_m={}
###------------------------------------------------------------------------------------------
###------------BEGINNING ITERATION-----------------------------------------------------------
###------------------------------------------------------------------------------------------
for iter in range(len(theta_list)):
    ## PARAMETERS ITERATED THROUGH----------------------------------------------
    theta=theta_list[iter]

    #ln and ln1 determine the initial rotated state of the rrs of the solid piece
    ln1=math.cos(math.radians(theta))*(l-ln2*(math.cos(math.radians(theta))+math.sin(math.radians(theta))))   #length of a quarter of the unit cells
    ln=(math.cos(math.radians(theta))+math.sin(math.radians(theta)))*(l-ln2*(math.cos(math.radians(theta))+math.sin(math.radians(theta)))) + ln2

    print('ln1,ln are',ln1,ln)

    #some commonly used relationships----------------
    ln12=ln1+ln2
    lnm=ln-ln12
    #pattern parameter relationships------------------
    #points above the horizontal axis having the points for the edge inclusions
    pex={0:ln1,1:0,2:0,3:lnm,4:0,5:0}
    pey={0:lnm,1:0,2:0,3:ln1,4:0,5:0}
    # points along the horizontal axis
    ph=[0,lnm,ln-ln1,ln,ln+ln1,2*ln-lnm]
    pv=[0,ln1,ln-lnm,ln,ln+lnm,2*ln-ln1]

    inc=2*ln
    ####-----MAIN PROGRAM-------------------------------------------------------
    ############################################################################
    ##CREATE MODEL--------------------------------------------------------------
    part_sketch_name='rrs'
    model_name='rrs'+repr(theta)
    print(model_name)
    AuxPattM=mdb.Model(name=model_name)
    AuxPattM.ConstrainedSketch(name=part_sketch_name, sheetSize=200.0)
    sketch1=AuxPattM.sketches[part_sketch_name]

    #GEOMETRY-------------------------------------------------------------------------------
    #Generating the outer boundary of the auxetic Pattern---------------------------

    # function to the list of list of points to draw the edges in the x direction
    def xy_dir(nq,pq,peq,i):
        loq=[[[] for r in range(2)] for j in range(6)]
        #print(loq)
        for k in range(6):
            for w in range(2):
                if k!=5:
                    loq[k][w]=[pq[k+w],peq[k+w]]
                    #print(loq[k][w])
                elif k==5:
                    loq[k][w]=[(pq[k-k*w]+inc*(i+1)*w),peq[k-k*w]]
                    #print(pq[k-k*w]+inc*(i+1)*w)
                    #print(loq[k][w])
        return loq

    # function to sketch the outer boundary in the x direction
    def sketcher_x(nq,pq,peq,ctr):
        for i in range(nq):
            inq=inc*i
            pq=[x+inq for x in pq]
            loq=xy_dir(nq,pq,peq,i)
            for l in loq:
                sketch1.Line(point1=tuple(l[0]),point2=tuple(l[1]))
                ctr=ctr+1
        return ctr

    #function to sketch the outer boundary in the y direction
    def sketcher_y(nq,pq,peq,ctr):
        for i in range(nq):
            inq=inc*i
            pq=[x+inq for x in pq]
            loq=xy_dir(nq,pq,peq,i)
            #print(loq)
            for l in loq[1:]:
                sketch1.Line(point1=tuple(l[0].reverse()),point2=tuple(l[1].reverse()))
                ctr=ctr+1
        return ctr

    #sketcher_x(nx,ph,pex,ctr)
    #sketcher_y(ny,pv,pey,ctr)
    #print(ctr)